{
 "name" : "Pman.Tab.AdminTranslations",
 "parent" : "Pman.Tab.AdminTranslationsInt",
 "title" : "Admin - Translations",
 "path" : "/home/alan/gitlive/Pman.Admin/Pman.Tab.AdminTranslations.bjs",
 "permname" : "Admin.Translations",
 "modOrder" : "950",
 "strings" : {
  "0a52da7a03a6de3beefe54f8c03ad80d" : "Original",
  "69fd71b6f79260924a32a45850a13ab7" : "Translations (rescan this to update strings)",
  "9d1ead73e678fa2f51a70a933b0bf017" : "Not Found",
  "801ab24683a4a8c433c6eb40c48bcd9d" : "Download",
  "6dd08874f83507e9c7b23f1a46b7fa7c" : "Translation",
  "07a1d316d1065473f290c3c2b72a80f3" : "Application Words",
  "e3d388b2c43e5ba0905702620ae2abc1" : "Search for",
  "e2f9d206562d8f5ea421ad51100f7151" : "Displaying petition_entry{0} - {1} of {2}",
  "cd6ae20e52d83f601c5fa12b66f0f6d0" : "Rescan",
  "91412465ea9169dfd901dd5e7c96dd99" : "Upload",
  "4d1c8263ba1036754f8db14a98f9f006" : "Reload",
  "f2a6c498fb90ee345d997f888fce3b18" : "Delete",
  "03c2e7e41ffc181a4e84080b4710e81e" : "New",
  "193cfc9be3b995831c6af2fea6650e60" : "Page",
  "1bc29b36f623ba82aaf6724fd3b16718" : "md5"
 },
 "items" : [
  {
   "region" : "center",
   "xtype" : "NestedLayoutPanel",
   "title" : "Application Words",
   "$ xns" : "Roo",
   "items" : [
    {
     "xtype" : "BorderLayout",
     "$ xns" : "Roo",
     "* prop" : "layout",
     "items" : [
      {
       "xtype" : "LayoutRegion",
       "width" : 450,
       "$ xns" : "Roo",
       "split" : true,
       "* prop" : "west"
      },
      {
       "xtype" : "LayoutRegion",
       "$ xns" : "Roo",
       "* prop" : "center"
      },
      {
       "listeners" : {
        "render" : "function (_self)\n{\n    _this.treepanel = _self;\n}"
       },
       "region" : "west",
       "xtype" : "TreePanel",
       "$ xns" : "Roo",
       "items" : [
        {
         "xtype" : "Toolbar",
         "$ xns" : "Roo",
         "* prop" : "toolbar",
         "items" : [
          {
           "listeners" : {
            "click" : "function (_self, e)\n{\n    Pman.Dialog.AdminLanguagePick.show( {  }, function(lang) {\n        \n        new Pman.Request({\n            url : baseURL + '/Roo/core_templatestr',\n            method : 'POST',\n            params : {\n                _rescan : lang\n            }, \n            success : function()\n            {\n                _this.treepanel.tree.getRootNode().reload();\n            }\n        });\n    \n    });\n    \n}"
           },
           "text" : "New",
           "xtype" : "Button",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "xtype" : "Separator",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "listeners" : {
            "click" : "function (_self, e)\n{\n    var tree = _this.treepanel.tree;\n    var sn  = tree.getSelectionModel().getSelectedNode();\n\n    if (!sn || typeof(sn.attributes.language) == 'undefined' || !sn.attributes.language) {\n        Roo.MessageBox.alert(\"Error\", \"Select a language\");\n        return;\n    }\n\n     Roo.MessageBox.confirm(\"Confirm\", \"Are sure you want to delete the language\", function (v){\n            if (v != 'yes') {\n                return;\n            }\n            Roo.MessageBox.alert(\"Not yet\", \"not done yet\");\n            return;\n            \n            \n            \n            \n        });\n}"
           },
           "text" : "Delete",
           "xtype" : "Button",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "xtype" : "Separator",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "listeners" : {
            "click" : "function (_self, e)\n{\n    var tree = _this.treepanel.tree;\n    Roo.log(tree);\n    var sn  = tree.getSelectionModel().getSelectedNode();\n\n    if (!sn) {\n        Roo.MessageBox.alert(\"Error\", \"Select a node\");\n        return;\n    }\n    \n    \n    var steps = [ \n           'scanProjectBJS',\n             'scanPmanBJS',\n             'scanPmanTemplates',\n             'scanTables',\n             'syncLanguage'  \n    ];\n    \n    \n    var syncTemplate = function(){\n    \n        var step = steps.shift();\n        Roo.MessageBox.updateProgress( (5.0 - steps.length) / 5.0, \"Running \" + step);\n    \n        new Pman.Request({\n            url : baseURL + '/Admin/UpdateBjsTemplates/' + step,\n            method : 'GET',\n            //mask : 'Processing...',\n            timeout : 9000000,\n            success : function()\n            {\n               if (steps.length > 0 ) { \n                    syncTemplate();\n                    return;\n                }\n                Roo.MessageBox.hide();\n                _this.treepanel.tree.getRootNode().reload();\n            }\n        });\n    \n    };\n    \n    \n    var syncLanguage = function(){\n        new Pman.Request({\n            url : baseURL + '/Roo/Core_templatestr',\n            method : 'POST',\n            mask : 'Processing...',\n            params : {\n                _rescan : sn.attributes.id.split(':')[1]\n            }, \n            success : function()\n            {\n                _this.treepanel.tree.getRootNode().reload();\n            }\n        });\n    };\n    \n   var syncSingleTemplate = function(id){\n        new Pman.Request({\n            url : baseURL + '/Roo/Core_template',\n            method : 'POST',\n            mask : 'Processing...',\n            params : {\n                id : id,\n                _rescan : 1\n            }, \n            success : function()\n            {\n                _this.treepanel.tree.getRootNode().reload();\n            }\n        });\n    };\n    \n    \n    if(typeof(sn.isRoot) != 'undefined' && sn.isRoot){\n        Roo.MessageBox.progress(\"Syncing templates\", \"Starting\");\n        syncTemplate();\n        return;\n    }\n    \n    if(typeof(sn.attributes.language) != 'undefined' && sn.attributes.language){\n        syncLanguage();\n        return;\n    }\n    \n     if(typeof(sn.attributes.id) != 'undefined' && sn.attributes.id * 1> 0){\n        syncSingleTemplate(sn.attributes.id);\n        return;\n    }\n    \n    \n    \n    \n}"
           },
           "text" : "Rescan",
           "xtype" : "Button",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "xtype" : "Fill",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "listeners" : {
            "click" : "function (_self, e)\n{\n    \n    \n    Pman.Dialog.Image.show({\n       _url : baseURL + '/Admin/Import/Core_templatestr' \n     \n    }, function() {\n         _this.treepanel.tree.getRootNode().reload();\n    });\n    \n    \n    \n}"
           },
           "text" : "Upload",
           "xtype" : "Button",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "xtype" : "Fill",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "listeners" : {
            "click" : "function (_self, e)\n{\n    var tree = _this.treepanel.tree;\n\n    var sn  = tree.getSelectionModel().getSelectedNode();\n    \n    p = {\n        csvCols : 'src_id_mdsum,template_id_view_name,template_id_template,src_id_txt,lang,txt',\n        csvTitles : 'Code,Module,Template,Original,Language,Translation',\n        limit : 9999,\n        sort: 'template_id_view_name,template_id_template,src_id_txt',\n        dir: 'ASC'\n    };\n    if (!sn ||  sn.id == 'transtree') {\n        Roo.MessageBox.alert(\"Error\", \"Select language, module or page\");\n        return;\n    }\n    if (typeof(sn.id) == 'number') {\n        p.template_id = sn.id;\n\n    }\n    \n    \n    if (sn.id.match(/^table:/)) {\n        var sns = sn.id.split(':');\n        p.lang = sns[1];\n        p.on_table = sns[2];\n        p.csvCols = 'src_id_mdsum,on_table,on_id,on_col,src_id_txt,lang,txt';\n        p.csvTitles = 'Code,Table,Table id,Column,Language,Translation';\n    }\n    \n    if (sn.id.match(/^view:/)) {\n        var sns = sn.id.split(':');\n        p.lang = sns[1];\n        p.template_id_view_name = sns[2];\n        \n    }\n    if (sn.id.match(/^lang:/)) {\n        var sns = sn.id.split(':');\n        p.lang = sns[1];\n\n   }\n    // transtree\n    // view: {lang} : {view_name}\n    // lang:\n     \n    new Pman.Download({\n        url : baseURL + '/Roo/Core_templatestr',\n        params : p,\n        method : 'GET' \n    });\n    \n    \n    \n    \n    \n}"
           },
           "text" : "Download",
           "xtype" : "Button",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "xtype" : "Separator",
           "$ xns" : "Roo.Toolbar"
          },
          {
           "listeners" : {
            "click" : "function (_self, e)\n{\n    _this.treepanel.tree.getRootNode().reload();\n    \n}"
           },
           "text" : "Reload",
           "xtype" : "Button",
           "$ xns" : "Roo.Toolbar"
          }
         ]
        },
        {
         "xtype" : "TreePanel",
         "rootVisible" : true,
         "$ xns" : "Roo.tree",
         "containerScroll" : false,
         "* prop" : "tree",
         "items" : [
          {
           "listeners" : {
            "loadexception" : "function (This, node, response)\n{\n    Roo.MessageBox.alert(\"Error\", \"Problem loading tree\");\n}",
            "beforeload" : "function (This, node, callback)\n{\n    // set some params.\n    Roo.log(node);\n    this.baseParams._tree = 1;\n    \n    //this.baseParams.category = node.attributes.category;\n}"
           },
           "$ baseParams" : "{ _tree : 1 }",
           "xtype" : "TreeLoader",
           "requestMethod" : "GET",
           "$ xns" : "Roo.tree",
           "* prop" : "loader",
           "$ dataUrl" : "baseURL + '/Roo/Core_templatestr'"
          },
          {
           "id" : "transtree",
           "text" : "Translations (rescan this to update strings)",
           "xtype" : "AsyncTreeNode",
           "$ xns" : "Roo.tree",
           "* prop" : "root"
          },
          {
           "listeners" : {
            "selectionchange" : "function (_self, node)\n{\n    Roo.log(node);\n    \n    //if (node.id.split('/').length < 2) {\n    //    return;\n   // }\n    (function() {\n        _this.grid.footer.onClick('first');\n    }).defer(100);\n    \n}"
           },
           "xtype" : "DefaultSelectionModel",
           "$ xns" : "Roo.tree",
           "* prop" : "selModel"
          }
         ]
        }
       ]
      },
      {
       "listeners" : {
        "|activate" : "function() {\n    _this.panel = this;\n    if (_this.grid) {\n        _this.grid.footer.onClick('first');\n    }\n}"
       },
       "fitToframe" : true,
       "background" : false,
       "region" : "center",
       "title" : "Page",
       "xtype" : "GridPanel",
       "fitContainer" : true,
       "$ xns" : "Roo",
       "tableName" : "Page",
       "items" : [
        {
         "listeners" : {
          "beforeedit" : "function (e)\n{   \n    /*if (e.record.data.src_id_txt.indexOf('<') > -1) {\n       // console.log(\"HTML EDITOR!!\");\n        Pman.Dialog.CmsTranslateEditor.show(e.record);\n        return false;\n    }*/\n    \n    var str=e.record.data.src_id_txt;\n    var patt=/{(.*?)}/g;\n    \n    Roo.log(str.length);\n    \n    \n    if(patt.test(str)){\n        e.cancel = true;\n        Pman.Dialog.AdminTranslateTemplates.show(e.record.data, function(v){\n            Roo.log(v);\n            e.value = v.txt;\n            e.record.set('txt', v.txt);\n            e.record.commit();\n        });\n        /*\n        Roo.MessageBox.prompt('WARNING', 'This text is with {TEMPLATE VARIABLE}, PLEASE BE CAREFUL EDITING. What\\'s change? '+str, function(btn, text){\n            if (btn == 'ok'){\n                e.value = text;\n                e.record.set('txt', text);\n                e.record.commit();\n            }\n        });*/\n        return;\n    }\n    \n    if(str.length > 150){\n        e.cancel = true;\n        Pman.Dialog.AdminTranslateTemplates.show(e.record.data, function(v){\n            e.value = v.txt;\n            e.record.set('txt', v.txt);\n            e.record.commit();\n        });\n        /*\n        Roo.MessageBox.prompt('WARNING', 'This text is with {TEMPLATE VARIABLE}, PLEASE BE CAREFUL EDITING. What\\'s change? '+str, function(btn, text){\n            if (btn == 'ok'){\n                e.value = text;\n                e.record.set('txt', text);\n                e.record.commit();\n            }\n        });*/\n        return;\n    }\n    \n\n    if (e.record.data.txt.replace(/\\s+/, '').length) {\n        return true;\n    }\n    \n    var tl = _this.treepanel.tree.getSelectionModel().getSelectedNode().parentNode.attributes.id;\n    // mapping?\n    \n    tl = (tl == 'zh_HK') ? 'zh-TW' : tl;\n    \n    if (tl == 'en' && !e.value.length) {\n\n        e.value = e.record.data.src_id_txt;\n        e.record.set('txt', e.record.data.src_id_txt);\n        return true;\n    }\n    \n    Pman.GoogleTranslate(e.record.data.src_id_txt, \"en\", tl, function(result) {\n       // Roo.log(result);\n        _this.grid.activeEditor.setValue(result);\n        //console.log(result.translation);\n    });\n    \n\n    \n    return true;\n}",
          "|rowdblclick" : "function (_self, rowIndex, e)\n{\n    if (!_this.dialog) {\n        return;\n    }\n    _this.dialog.show( this.getDataSource().getAt(rowIndex).data, function() {\n        _this.grid.footer.onClick('first');\n    }); \n}\n",
          "|render" : "function() \n{\n    _this.grid = this; \n    //_this.dialog = Pman.Dialog.FILL_IN\n    if (_this.panel.active) {\n        this.footer.onClick('first');\n      // this.ds.onc.onClick('first');\n    }\n}",
          "afteredit" : "function (e)\n{\n    e.record.commit();\n}"
         },
         "autoExpandColumn" : "txt",
         "xtype" : "EditorGrid",
         "loadMask" : true,
         "clicksToEdit" : 1,
         "$ xns" : "Roo.grid",
         "* prop" : "grid",
         "items" : [
          {
           "xtype" : "Toolbar",
           "$ xns" : "Roo",
           "* prop" : "toolbar",
           "items" : [
            {
             "listeners" : {
              "specialkey" : "function (_self, e)\n{\n_this.grid.footer.onClick('first');\n}",
              "render" : "function (_self)\n{\n    _this.searchBox = this;\n}"
             },
             "xtype" : "TextField",
             "String emptyText" : "Search for",
             "$ xns" : "Roo.form"
            },
            {
             "listeners" : {
              "|click" : "function (_self, e)\n{\n_this.grid.footer.onClick('first');\n}"
             },
             "xtype" : "Button",
             "cls" : "x-btn-icon",
             "$ icon" : "rootURL + '/Pman/templates/images/search.gif'",
             "$ xns" : "Roo.Toolbar"
            },
            {
             "listeners" : {
              "|click" : "function (_self, e)\n{\n    _this.searchBox.setValue('');\n    \n    _this.grid.footer.onClick('first');\n}"
             },
             "xtype" : "Button",
             "cls" : "x-btn-icon",
             "$ icon" : "rootURL + '/Pman/templates/images/edit-clear.gif'",
             "$ xns" : "Roo.Toolbar"
            }
           ]
          },
          {
           "pageSize" : 100,
           "xtype" : "PagingToolbar",
           "emptyMsg" : "Not Found",
           "$ xns" : "Roo",
           "displayMsg" : "Displaying petition_entry{0} - {1} of {2}",
           "displayInfo" : true,
           "* prop" : "footer"
          },
          {
           "listeners" : {
            "update" : "function (_self, rec, operation)\n{\n    Roo.log(operation);\n    \n    if (operation != 'commit') {\n        return;\n    }\n    \n\n    _this.grid.getView().el.mask(\"Saving\");\n    new Pman.Request({\n        url : baseURL + '/Roo/Core_templatestr',\n        method: 'POST',\n        params : {\n            id : rec.get('id'),\n            txt : rec.get('txt')\n        },\n        success : function()\n        {\n            _this.grid.getView().el.unmask();\n                //g.getDataSource().reload();\n        },\n        failure : function()\n        {\n            _this.grid.getView().el.unmask();\n            Roo.MessageBox.alert(\"Error\", \"There was a problem saving the data - try reloading\");\n         }\n            \n    });\n    \n}",
            "beforeload" : "function (_self, o)\n{\n   \n    var sn = _this.treepanel.tree.getSelectionModel().getSelectedNode();\n\n    if (!sn || typeof(sn.attributes) == 'undefined' || typeof(sn.attributes.leaf) == 'undefined' || !sn.attributes.leaf) { \n        _this.grid.ds.removeAll();\n        return false;\n    }\n\n    o.params = o.params || {};\n    o.params.lang =  sn.parentNode.attributes.id.split(':')[1];\n   \n    o.params.active = 1;\n    o.params['!src_id'] = 0;\n    \n    if (_this.searchBox && _this.searchBox.getValue().length) { \n        o.params['_search_txt'] = _this.searchBox.getValue();\n    }\n    \n    \n    if(sn.attributes.on_table){\n        o.params.on_table = sn.attributes.on_table;\n    } else {\n         o.params.template_id = sn.attributes.id * 1;\n     }\n    \n}\n\n\n"
           },
           "xtype" : "Store",
           "remoteSort" : true,
           "$ sortInfo" : "{ field : 'src_id_txt', direction: 'ASC' }",
           "$ xns" : "Roo.data",
           "* prop" : "dataSource",
           "items" : [
            {
             "$ url" : "baseURL + '/Roo/Core_templatestr.php'",
             "xtype" : "HttpProxy",
             "method" : "GET",
             "$ xns" : "Roo.data",
             "* prop" : "proxy"
            },
            {
             "id" : "id",
             "root" : "data",
             "xtype" : "JsonReader",
             "$ fields" : "[\n    {\n        'name': 'id',\n        'type': 'int'\n    },\n    {\n        'name': 'shortname',\n        'type': 'string'\n    }\n   \n]",
             "$ xns" : "Roo.data",
             "* prop" : "reader",
             "totalProperty" : "total"
            }
           ]
          },
          {
           "xtype" : "ColumnModel",
           "width" : 300,
           "header" : "Original",
           "$ renderer" : "function(v,x,r) \n{\n    var c = '#666';\n    if (r.data.updated  < r.data.src_id_updated) {\n        c = 'red';\n    }\n    \n    return String.format('<div style=\"color:'+c+'\";>{0}</div>', v)\n\n}",
           "$ xns" : "Roo.grid",
           "* prop" : "cm[]",
           "dataIndex" : "src_id_txt"
          },
          {
           "xtype" : "ColumnModel",
           "width" : 200,
           "header" : "Translation",
           "$ renderer" : "function(v,x,r) \n{ \n\n    var c = '#666';\n    if (r.data.updated  < r.data.src_id_updated) {\n        c = 'red';\n    }\n    \n    return String.format('<div style=\"color:'+c+'\";>{0}</div>', v)\n\n}",
           "$ xns" : "Roo.grid",
           "* prop" : "cm[]",
           "dataIndex" : "txt",
           "items" : [
            {
             "xtype" : "GridEditor",
             "$ xns" : "Roo.grid",
             "* prop" : "editor",
             "items" : [
              {
               "xtype" : "TextField",
               "allowBlank" : false,
               "$ xns" : "Roo.form",
               "* prop" : "field"
              }
             ]
            }
           ]
          },
          {
           "xtype" : "ColumnModel",
           "width" : 250,
           "header" : "md5",
           "$ renderer" : "function(v,x,r) \n{\n    return v ? v : '';\n\n}",
           "$ xns" : "Roo.grid",
           "* prop" : "cm[]",
           "Boolean hidden" : true,
           "dataIndex" : "src_id_mdsum"
          }
         ]
        }
       ]
      }
     ]
    }
   ]
  }
 ]
}